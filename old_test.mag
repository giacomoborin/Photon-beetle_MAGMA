
DATA:=["",
"FFFFFF",
"000000000000000",
"ABC",
"0123456789",
"ABCDEFFEDCBA",
"0123456789ABCDEFFEDCBA9876543210",
"00000",
"00001",
"6"];

SH:=[ "44A99882FEA033566856A27E7F0C94DC84FAC7E411B08B890A4A574E3DB75D4A", 
"67A495E625E19F613F0A5D06583B0D4E279AFEF3FF51EA76F2E113675A5486E2", 
"BA29AA1E51C1376C018753AA77E13ECB777C3130B3CF38171A49A4D08E13AD52", 
"80D048BD80F666004DF99D7F50C1D06E9660F15310AE6A2964320513301E70B9", 
"6FFE58C1114BB8C74B087BFA5D3E3BBBBDDBE59EFD274CCCCE1A8FD58DBFB6DE", 
"5C80BCEADF80B97ADD972158F3D824E0AA0D4A0B0AE79164BC41176BAD1EEA42", 
"5F7B49F83D36522560B23E37F08BBDC292AB93591E6922BC3B4DBB8D71FB970D", 
"93CF0223B07E278BD32A374B6479E5EED12837DB6649ED7F598DAAADC1F29CB8", 
"09685B66594B113F1B03BE4F8D0816BDC336B2641D3719FC6C88F30EEBCA99C2", 
"3A692E12AE0FEF9B6B304D6D20C8FB591923311CA8E70F0AB4F89953502AD5F0" ];




time for i in [1..#DATA] do 
	"test",i;
	a:=PhotonHASH(DATA[i]);
	//"Parity",#DATA[i] mod 2;
	if a ne SH[i] then 
		"error in Encryption";
		"Initial DATA",DATA[i];
		"Right", SH[i];
		"Wrong",a;
	end if;
end for;



DATA:=[
    [ "2C45953543EB92CAED0ACE14F4A5199F", "FE31020172E7FBBB352338E4AA2C207C","01", "0123456789ABCDEF"],
    [ "D86D5706D1FAEF8B6590B4A094CB2530", "209B0F4489B0B8E357F760D931F9A748","010101010101","1111111111" ], 
    [ "AC6676EA4927CD8C388932B41E80E994", "87EBBF032CB5F90B90B78377A0238656","","" ],
    [ "E685F7EE15BBDACC9B029D70958A87A9", "B20EDF5D57412914FE2A75CD5F83F7DD","0123456789ABCDEF","000000000000000000000000" ],
    [ "43B6235DA262AE93084899444DB6EE9E", "EECEDD136C0F3E9D6F25F930887BFAD1","0123456789ABCDEFFEDCBA9876543210","ABCDEFFEDCBA" ], 
    [ "168D752F83A92659CC1780A0620A4E27", "2D4240BA604F2E60E8B851BC5053D7A2","01234","00" ],
    [ "216CEADAE0B640D66B97371A94B3AC09", "83EC5878EF4192C9604037D67B0A95B7","ABBA","BAAB" ],
    [ "65032E017CA55779BEA2DB8FC3CF9EDA", "9839763FE0D86B090ADAD1583378028F","ABABABABA", "FFFFFFFFFFFFFFFFF" ], 
    [ "33F43D97BA21941F8E33F1680EA98974", "49AC9A222AB2545FD35274655364144D","AAAAAAAAAAAAAAAA","" ],
    [ "A72FC38409F9D253652D878F4B4CA7B6", "173DF7FE9DF3A07EDE7DA7D968472B7","000000000000000000000000000000000000000000","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" ]
];

S:=
[
    [ "4F", "C68DC0C8038C7C3A2E6B7F0BE4AC1850" ],
    [ "ADCA0485246C", "73329349D908EFD460F6275487AC90B2" ],
    [ "", "9F903D2C228FA7EB0D750085423ABBAB" ],
    [ "35CD22BC13B40C0F", "60E5E50B26103A8A6739322EEDFDA6B4" ],
    [ "0835233EFF137EB5217EEF77DC90A31E", "3F401D53732EA27474D9783D0A66CCAD" ],
    [ "FADC2", "4664ADA4A0BBC6D2AD56A9D165029C0C" ],
    [ "B5FE", "CC22D47722C52AD7B77CA4F99903263E" ],
    [ "AC89D9147", "02D037FBBC96C319DF767E8CE9D34566" ],
    [ "12F97B1AA8A86A9D", "59F3E1BB6BE7F4B78ECA5366CC86B6D9" ],
    [ "9C983CAECD9085A8506CF9CF0F704CA2054B18925D", 
    "1D34AAA6E918268101C433EA90A0AB56" ]
];



S32:=
[
    [ "56", "C7F017ED124AA69561D99754536C522D" ],
    [ "3ED967BAF52D", "94767E078CA7C179F856B6FB4EB0DBA1" ], 
    [ "", "9F903D2C228FA7EB0D750085423ABBAB" ],
    [ "B0BFFB4E104EC147", "12753CD28472482518C04521D55E0FB6" ],
    [ "B351E5ABE01304D5E9F7BC78FF1B74A2", "37BA7BF55951F85429310C0CFEA420C5" ], 
    [ "8E299", "4664ADA4A0BBC6D2AD56A9D165029C0C" ],
    [ "93E0", "CC22D47722C52AD7B77CA4F99903263E" ],
    [ "4DEA6E67F", "4AB74A234AB3B016B52BD4C12AAE4DE9" ], 
    [ "DC6A2AF32C37C3F9", "E978295B33A8A65AE261E2092DB7AAF5" ],
    [ "846B7E324C400EE1677CB500F4894B9FE52E30C69C", 
    "26C7BA78491A0BD6EF1E65F8924396B2" ]
];



"---------ENC for 128----------";
 
time for i in [1..#DATA] do 
	a,b:=PhotonAEAD128Enc(DATA[i][1],DATA[i][2],DATA[i][4],DATA[i][3]);
	if a ne S[i][1] or b ne S[i][2] then 
		"error in Encryption, test",i;
		"Initial DATA",DATA[i];
		"Right", S[i];
		"Wrong",a,b;
	else
		"test",i,"passed";
	end if;
end for;	


"---------ENC for 32----------";

time for i in [1..#DATA] do 
 	a,b:=PhotonAEAD32Enc(DATA[i][1],DATA[i][2],DATA[i][4],DATA[i][3]);
	if a ne S32[i][1] or b ne S32[i][2] then 
		"error in Encryption, test",i;
		"Initial DATA",DATA[i];
		"Right", S32[i];
		"Wrong",a,b;
	else
		"test",i,"passed";
	end if;
end for;



"---------DEC for 128----------";

time for i in [1..#DATA] do 
	a:=PhotonAEAD128Dec(DATA[i][1],DATA[i][2],DATA[i][4],S[i][1],S[i][2]);
	if a ne DATA[i][3] then 
		"error in Decryption, test",i;
		"Initial DATA",[DATA[i][1],DATA[i][2],DATA[i][4],S[i][1],S[i][2]];
		"Right", DATA[i][3];
		"Wrong",a;
	else
		"test",i,"passed";
	end if;
end for;	



"---------DEC for 32----------";

time for i in [1..#DATA] do 
	a:=PhotonAEAD32Dec(DATA[i][1],DATA[i][2],DATA[i][4],S32[i][1],S32[i][2]);
	if a ne DATA[i][3] then 
		"error in Decryption, test",i;
		"Initial DATA",[DATA[i][1],DATA[i][2],DATA[i][4],S32[i][1],S32[i][2]];
		"Right", DATA[i][3];
		"Wrong",a;
	else
		"test",i,"passed";
	end if;
end for;

